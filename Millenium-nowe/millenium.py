import os
import requests
import time
import threading
from tqdm import tqdm
from datetime import date, datetime, timedelta

START_DATE = date(2006, 6, 1)
END_DATE = date(2006, 8, 20)
DATES = [
    # '2022-12-29'
]

# DATES = ['2005-03-29',	'2005-03-31',	'2005-04-07',	'2005-04-14',	'2005-04-15',	'2005-04-22',	'2005-05-05',	'2005-06-07',	'2005-06-10',	'2005-07-06',	'2005-07-26',	'2005-08-24',	'2005-08-26',	'2005-09-08',	'2005-09-22',	'2005-09-28',	'2005-12-08',	'2005-12-23',	'2006-01-16',	'2006-01-17',	'2006-02-15',	'2006-03-07',	'2006-04-18',	'2006-05-08',	'2006-05-29',	'2006-06-05',	'2006-06-08',	'2006-06-12',	'2006-06-16',	'2006-07-05',	'2006-07-07',	'2006-07-24',	'2006-07-28',	'2006-08-11',	'2006-08-15',	'2006-08-29',	'2006-09-01',	'2006-09-11',	'2006-09-20',	'2006-10-09',	'2006-10-11',	'2006-10-25',	'2006-11-13',	'2006-11-28',	'2006-11-29',	'2006-11-30',	'2006-12-08',	'2007-01-11',	'2007-01-16',	'2007-01-30',	'2007-02-01',	'2007-02-06',	'2007-02-14',	'2007-02-22',	'2007-03-23',	'2007-04-06',	'2007-04-11',	'2007-05-11',	'2007-05-25',	'2007-05-29',	'2007-06-08',	'2007-06-14',	'2007-07-04',	'2007-07-27',	'2007-08-09',	'2007-08-16',	'2007-09-27',	'2007-10-09',	'2007-11-06',	'2007-11-12',	'2007-11-28',	'2007-12-13',	'2007-12-17',	'2007-12-19',	'2008-01-10',	'2008-01-18',	'2008-01-21',	'2008-01-22',	'2008-02-20',	'2008-03-13',	'2008-04-02',	'2008-04-11',	'2008-04-21',	'2008-04-24',	'2008-05-29',	'2008-07-11',	'2008-07-16',	'2008-07-24',	'2008-07-29',	'2008-08-06',	'2008-08-11',	'2008-08-13',	'2008-08-18',	'2008-09-02',	'2008-09-03',	'2008-09-04',	'2008-09-08',	'2008-09-09',	'2008-09-10',	'2008-09-12',	'2008-09-15',	'2008-09-16',	'2008-09-17',	'2008-09-18',	'2008-09-19',	'2008-09-22',	'2008-09-26',	'2008-09-29',	'2008-10-02',	'2008-10-07',	'2008-10-08',	'2008-10-10',	'2008-10-13',	'2008-10-14',	'2008-10-15',	'2008-10-16',	'2008-10-17',	'2008-10-20',	'2008-10-21',	'2008-10-22',	'2008-10-23',	'2008-10-24',	'2008-10-27',	'2008-10-28',	'2008-10-29',	'2008-10-30',	'2008-10-31',	'2008-11-03',	'2008-11-05',	'2008-11-06',	'2008-11-07',	'2008-11-10',	'2008-11-12',	'2008-11-13',	'2008-11-14',	'2008-11-17',	'2008-11-18',	'2008-11-19',	'2008-11-21',	'2008-11-26',	'2008-11-27',	'2008-11-28',	'2008-12-01',	'2008-12-02',	'2008-12-04',	'2008-12-08',	'2008-12-12',	'2008-12-15',	'2008-12-16',	'2008-12-17',	'2008-12-18',	'2008-12-19',	'2008-12-24',	'2008-12-29',	'2008-12-30',	'2009-01-02',	'2009-01-06',	'2009-01-07',	'2009-01-09',	'2009-01-12',	'2009-01-14',	'2009-01-15',	'2009-01-16',	'2009-01-20',	'2009-01-21',	'2009-01-22',	'2009-01-23',	'2009-01-26',	'2009-01-27',	'2009-01-28',	'2009-01-29',	'2009-01-30',	'2009-02-02',	'2009-02-03',	'2009-02-04',	'2009-02-06',	'2009-02-10',	'2009-02-11',	'2009-02-12',	'2009-02-13',	'2009-02-16',	'2009-02-17',	'2009-02-20',	'2009-02-23',	'2009-02-25',	'2009-02-26',	'2009-02-27',	'2009-03-02',	'2009-03-03',	'2009-03-06',	'2009-03-10',	'2009-03-11',	'2009-03-12',	'2009-03-13',	'2009-03-16',	'2009-03-17',	'2009-03-18',	'2009-03-19',	'2009-03-26',	'2009-03-27',	'2009-03-30',	'2009-04-02',	'2009-04-03',	'2009-04-06',	'2009-04-10',	'2009-04-14',	'2009-04-16',	'2009-04-20',	'2009-04-21',	'2009-04-23',	'2009-04-24',	'2009-04-27',	'2009-04-29',	'2009-04-30',	'2009-05-04',	'2009-05-11',	'2009-05-18',	'2009-05-19',	'2009-05-22',	'2009-05-26',	'2009-05-28',	'2009-05-29',	'2009-06-01',	'2009-06-04',	'2009-06-05',	'2009-06-10',	'2009-06-12',	'2009-06-15',	'2009-06-22',	'2009-06-24',	'2009-07-01',	'2009-07-02',	'2009-07-09',	'2009-07-14',	'2009-07-15',	'2009-07-23',	'2009-08-03',	'2009-08-06',	'2009-08-13',	'2009-08-17',	'2009-08-18',	'2009-08-28',	'2009-09-03',	'2009-09-08',	'2009-09-10',	'2009-09-11',	'2009-09-17',	'2009-09-18',	'2009-09-21',	'2009-09-24',	'2009-09-28',	'2009-09-29',	'2009-10-02',	'2009-10-06',	'2009-10-09',	'2009-10-12',	'2009-10-14',	'2009-10-20',	'2009-10-27',	'2009-11-03',	'2009-11-10',	'2009-11-12',	'2009-11-16',	'2009-11-27',	'2009-12-04',	'2009-12-09',	'2009-12-16',	'2009-12-21',	'2009-12-24',	'2010-01-04',	'2010-01-18',	'2010-01-25',	'2010-01-27',	'2010-02-03',	'2010-02-04',	'2010-02-10',	'2010-02-12',	'2010-03-12',	'2010-03-23',	'2010-03-24',	'2010-03-29',	'2010-04-08',	'2010-04-12',	'2010-04-16',	'2010-04-22',	'2010-04-26',	'2010-04-27',	'2010-04-28',	'2010-04-29',	'2010-05-04',	'2010-05-05',	'2010-05-06',	'2010-05-10',	'2010-05-11',	'2010-05-17',	'2010-05-20',	'2010-05-25',	'2010-05-28',	'2010-06-04',	'2010-06-10',	'2010-06-15',	'2010-06-21',	'2010-06-23',	'2010-06-25',	'2010-06-28',	'2010-06-30',	'2010-07-01',	'2010-07-02',	'2010-07-06',	'2010-07-09',	'2010-07-15',	'2010-07-19',	'2010-07-21',	'2010-07-26',	'2010-07-28',	'2010-08-11',	'2010-08-13',	'2010-08-16',	'2010-08-19',	'2010-08-30',	'2010-08-31',	'2010-09-10',	'2010-09-20',	'2010-09-28',	'2010-10-04',	'2010-10-19',	'2010-10-22',	'2010-10-25',	'2010-10-26',
#          '2010-11-02',	'2010-11-03',	'2010-11-04',	'2010-11-05',	'2010-11-10',	'2010-11-12',	'2010-11-15',	'2010-11-17',	'2010-11-18',	'2010-11-19',	'2010-11-22',	'2010-11-29',	'2010-12-02',	'2010-12-09',	'2010-12-10',	'2010-12-13',	'2010-12-28',	'2010-12-30',	'2011-01-05',	'2011-01-11',	'2011-01-14',	'2011-01-20',	'2011-01-26',	'2011-01-28',	'2011-02-03',	'2011-02-04',	'2011-02-08',	'2011-02-10',	'2011-02-14',	'2011-02-16',	'2011-03-02',	'2011-03-10',	'2011-03-11',	'2011-03-17',	'2011-03-22',	'2011-03-24',	'2011-04-04',	'2011-04-11',	'2011-04-12',	'2011-05-04',	'2011-05-09',	'2011-05-10',	'2011-05-11',	'2011-05-12',	'2011-05-18',	'2011-05-27',	'2011-06-13',	'2011-06-14',	'2011-06-15',	'2011-06-16',	'2011-06-24',	'2011-06-27',	'2011-06-28',	'2011-06-30',	'2011-07-06',	'2011-07-08',	'2011-07-11',	'2011-07-13',	'2011-07-18',	'2011-07-21',	'2011-08-01',	'2011-08-02',	'2011-08-03',	'2011-08-05',	'2011-08-10',	'2011-08-12',	'2011-08-16',	'2011-08-17',	'2011-09-01',	'2011-09-05',	'2011-09-06',	'2011-09-08',	'2011-09-09',	'2011-09-12',	'2011-09-13',	'2011-09-14',	'2011-09-15',	'2011-09-19',	'2011-09-21',	'2011-09-23',	'2011-09-26',	'2011-10-03',	'2011-10-04',	'2011-10-05',	'2011-10-10',	'2011-10-14',	'2011-10-17',	'2011-10-20',	'2011-10-25',	'2011-10-27',	'2011-10-31',	'2011-11-02',	'2011-11-03',	'2011-11-04',	'2011-11-08',	'2011-11-10',	'2011-11-14',	'2011-11-16',	'2011-11-17',	'2011-11-25',	'2011-11-30',	'2011-12-05',	'2011-12-09',	'2011-12-15',	'2011-12-16',	'2011-12-20',	'2011-12-21',	'2011-12-23',	'2011-12-27',	'2011-12-30',	'2012-01-04',	'2012-01-05',	'2012-01-13',	'2012-01-17',	'2012-01-23',	'2012-01-26',	'2012-02-16',	'2012-03-08',	'2012-03-13',	'2012-03-19',	'2012-03-26',	'2012-04-04',	'2012-04-06',	'2012-04-18',	'2012-04-25',	'2012-04-26',	'2012-05-08',	'2012-05-11',	'2012-05-14',	'2012-05-16',	'2012-05-25',	'2012-05-30',	'2012-06-01',	'2012-06-11',	'2012-06-13',	'2012-06-15',	'2012-06-29',	'2012-07-12',	'2012-07-20',	'2012-08-17',	'2012-08-23',	'2012-09-14',	'2012-09-19',	'2012-09-24',	'2012-10-04',	'2012-11-08',	'2012-11-22',	'2012-11-29',	'2012-12-06',	'2012-12-11',	'2012-12-12',	'2013-01-02',	'2013-01-09',	'2013-01-11',	'2013-01-28',	'2013-02-01',	'2013-02-08',	'2013-02-12',	'2013-02-14',	'2013-02-15',	'2013-02-26',	'2013-03-06',	'2013-03-07',	'2013-04-15',	'2013-05-10',	'2013-06-14',	'2013-06-18',	'2013-06-20',	'2013-07-12',	'2013-07-16',	'2013-07-18',	'2013-07-19',	'2013-08-08',	'2013-08-16',	'2013-08-20',	'2013-09-11',	'2013-10-16',	'2013-10-18',	'2013-10-23',	'2013-10-25',	'2013-11-20',	'2013-12-27',	'2014-01-16',	'2014-01-24',	'2014-01-28',	'2014-02-26',	'2014-03-03',	'2014-03-18',	'2014-04-02',	'2014-04-03',	'2014-04-15',	'2014-04-28',	'2014-05-29',	'2014-06-02',	'2014-06-06',	'2014-06-13',	'2014-06-20',	'2014-06-26',	'2014-07-14',	'2014-08-06',	'2014-09-01',	'2014-09-11',	'2014-09-12',	'2014-09-26',	'2014-10-15',	'2014-10-16',	'2014-10-22',	'2014-10-23',	'2014-10-29',	'2014-10-30',	'2014-11-13',	'2014-11-18',	'2014-12-02',	'2014-12-03',	'2014-12-11',	'2014-12-17',	'2014-12-18',	'2014-12-22',	'2014-12-29',	'2015-01-02',	'2015-01-08',	'2015-01-13',	'2015-01-15',	'2015-01-16',	'2015-01-20',	'2015-01-29',	'2015-01-30',	'2015-02-03',	'2015-02-06',	'2015-02-12',	'2015-02-16',	'2015-02-19',	'2015-02-20',	'2015-03-03',	'2015-03-16',	'2015-03-20',	'2015-03-24',	'2015-04-17',	'2015-04-20',	'2015-05-19',	'2015-06-09',	'2015-06-12',	'2015-06-16',	'2015-08-05',	'2015-08-11',	'2015-08-17',	'2015-08-18',	'2015-08-20',	'2015-08-24',	'2015-08-31',	'2015-09-08',	'2015-09-09',	'2015-09-11',	'2015-09-16',	'2015-09-23',	'2015-10-21',	'2015-11-04',	'2015-11-12',	'2015-11-13',	'2015-12-03',	'2015-12-11',	'2015-12-28',	'2015-12-29',	'2016-01-11',	'2016-01-15',	'2016-01-18',	'2016-01-25',	'2016-01-26',	'2016-01-29',	'2016-02-04',	'2016-02-09',	'2016-02-15',	'2016-02-19',	'2016-02-22',	'2016-03-08',	'2016-03-14',	'2016-03-16',	'2016-03-25',	'2016-03-29',	'2016-04-08',	'2016-04-13',	'2016-04-19',	'2016-05-04',	'2016-05-06',	'2016-06-03',	'2016-06-16',	'2016-06-21',	'2016-06-27',	'2016-08-09',	'2016-08-19',	'2016-08-25',	'2016-08-26',	'2016-09-02',	'2016-09-09',	'2016-10-06',	'2016-10-12',	'2016-10-25',	'2016-11-14',	'2016-12-05',	'2017-01-19',	'2017-01-23',	'2017-02-02',	'2017-03-23',	'2017-04-13',	'2017-04-21',	'2017-04-24',	'2017-05-12',	'2017-05-17',	'2017-05-18',	'2017-05-19',	'2017-05-26',	'2017-06-05',	'2017-06-08',	'2017-10-03',	'2017-10-04',	'2017-10-13',	'2017-10-18',	'2017-11-06',	'2017-11-08',	'2017-11-23',	'2017-11-28',	'2017-12-21',	'2018-04-10',	'2018-05-23',	'2018-06-25',	'2018-08-10',	'2018-08-13',	'2018-08-14',	'2018-08-17',	'2022-07-21', ]

THREADS_NUMBER = 4

FILENAME = 'Millenium'

HEADER = '''Millenium: Tabela Kursów Walut Obcych Banku Millennium S.A. (CHF)
* - Dewizy
** - Dewizy (produkty kredytowe firm):
        kursy wymiany walut obcych w złotych dla transakcji kredytowych zawartych z przedsiębiorcami:
            kredyty (poza kredytem w rachunku bieżącym), gwarancje bankowe, akredytywy dokumentowe, faktoring.
*** - Kurs waluty CHF do obsługi kredytów hipotecznych udzielonych we franku szwajcarskim przez Bank Millennium (CHH)

'''

FIELDS = ('Data', 'Godzina', 'Dewizy Kupno*', 'Dewizy Sprzedaż*',
          'Pieniądze Kupno', 'Pieniądze Sprzedaż', 'Dewizy Kupno**', 'Dewizy Sprzedaż**', '', 'Dewizy Kupno***', 'Dewizy Sprzedaż***')

# ------------------------------------------------------------------------------


headers = {
    'Accept': 'application/json, text/plain, */*',
    'Accept-Language': 'en-GB,en-US;q=0.9,en;q=0.8,pl;q=0.7',
    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzY29wZSI6ImludmVzdG1lbnRGdW5kcyIsImNmZyI6IiJ9.sbVFtlSE_455K4ijLgzFc9HQ62DbtqxOAiEyPCGyFAI',
    'Connection': 'keep-alive',
    #     'Cookie': 'JSESSIONID=45429516316FDD5315B5A8068F07CC0F; LB_bank_cookie=\u0021UVhowzAmN/viO5/RgaWQzy2zoXacAsF+GfF0vEOSZWTqnmYeqbu19xyu1Z/qlqKKIxYZ22wvcK8eHjg=; uuid-user-audit=80767a14-85ed-4842-a5a5-1aa25877de5e; DEFAULT_SEGMENT=425; bms=0:lcenvpqg:W~VcXMh3PLL~nWWj1RFO0x8qdeiEoydB; bmp=0:lcenvpqg:YcWw9hoT4kRM5bGAu_A215OHWZz6lMXZ; _gcl_au=1.1.644432252.1672655471; _gid=GA1.2.453359562.1672655472; Marketing_consent=1; PSESSIONID=6992F11065958831FADC97F9DA5A8391; XSRF-Token=a388578f-2aea-4369-b1a6-6dd425b17dc1; _ga=GA1.2.250489916.1672655472; _ga_DJ8B9NM8HM=GS1.1.1672655471.1.1.1672657409.60.0.0; _gat_UA-51105080-1=1',
    #     'DNT': '1',
    'Referer': 'https://www.bankmillennium.pl/o-banku/serwis-ekonomiczny/kursy-walut',
    #     'Sec-Fetch-Dest': 'empty',
    #     'Sec-Fetch-Mode': 'cors',
    #     'Sec-Fetch-Site': 'same-origin',
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36',
    #     'sec-ch-ua': '"Not?A_Brand";v="8", "Chromium";v="108", "Google Chrome";v="108"',
    #     'sec-ch-ua-mobile': '?0',
    #     'sec-ch-ua-platform': 'Windows"',
}


def getRates(date):
    date_str = datetime.strptime(date, "%Y-%m-%d").strftime("%d-%m-%Y")
    url = f'https://www.bankmillennium.pl/portal-apps/getFxRates?date={date_str}&language=pl'

    response = requests.get(url, headers=headers)

    if response.status_code != 200:
        return {'errors': f"Failed to fetch the resource: HTTP {response.status_code}"}

    data = response.json()

    if data == []:
        return {'errors': f"No course entries on this day"}

    result, info = '', ''

    # for entry in data:
    for entry in sorted(data, key=lambda e: e['timeStamp']):
        timestamp = entry['timeStamp'] // 1000
        dt_object = datetime.fromtimestamp(timestamp)
        table_date = dt_object.strftime('%Y-%m-%d')
        table_hour = dt_object.strftime('%H:%M')

        if table_date != date:
            return {'errors': f"Got different date than expected"}

        for country in entry['items']:
            if country['symbol'] == '797/CHF':
                foreignExchangeBuy = country['foreignExchangeBuy']
                foreignExchangeSale = country['foreignExchangeSale']
                moneyBuy = country['moneyBuy']
                moneySale = country['moneySale']
                companyDevisesBuy = country['companyDevisesBuy']
                companyDevisesSale = country['companyDevisesSale']
                break
        else:
            info += f'{table_date}\tCHF not found in entry from {table_hour}\n'
            continue

        chh_foreignExchangeBuy = entry['chh']['foreignExchangeBuy'] if entry['chh'] else '-'
        chh_foreignExchangeSale = entry['chh']['foreignExchangeSale'] if entry['chh'] else '-'

        row = (table_date, table_hour, foreignExchangeBuy, foreignExchangeSale,
               moneyBuy, moneySale, companyDevisesBuy, companyDevisesSale, '', chh_foreignExchangeBuy, chh_foreignExchangeSale)
        result += '\t'.join([str(x) for x in row]) + '\n'

    return {'data': result, 'info': info}


class DownloadingThread(threading.Thread):
    def __init__(self, dates):
        super(DownloadingThread, self).__init__()
        self.dates = dates
        self.errors = []
        self.result = ''

    def run(self):
        # print("Warning! This is approximated progress bar and some other threads can be still operating after reaching 100%.")
        for date in tqdm(self.dates):
            try:
                rates = getRates(date)
                if 'errors' in rates:
                    self.errors.append(f"{date}\t{rates['errors']}")
                else:
                    self.result += rates['data']
                    if rates['info']:
                        self.errors.append(rates['info'])
            except Exception as e:
                self.errors.append(f"{date}\tAnother error occured: {e}")


def split(arr, n):
    k, m = divmod(len(arr), n)
    return (arr[i*k+min(i, m):(i+1)*k+min(i+1, m)] for i in range(n))


if __name__ == '__main__':

    # x = getRates('2022-06-30')
    # xd = getRates('2020-11-30')
    # x = getRates('2006-11-30') // błąd gdy nie ma peakoTable=1 ale jest pekaoTable=2
    # x = getRates('2008-05-07')

    # print(x)
    # print(xd)

    # import sys
    # sys.exit()
    # -------------------------------------------------

    dates = []
    start_time = time.time()

    if DATES:
        dates = DATES
    else:
        date = START_DATE
        while date <= END_DATE:
            if date.weekday() < 5:
                dates.append(date.strftime("%Y-%m-%d"))
            date += timedelta(days=1)

    # with open('FAILS-1.txt') as file:
    # dates = file.readlines()
    # dates = [line.strip().split()[0] for line in dates]

    threads = [DownloadingThread(d) for d in split(dates, THREADS_NUMBER)]

    print("Starting...")

    for t in threads:
        t.start()

    for t in threads:
        t.join()

    result = HEADER + '\t'.join(FIELDS) + '\n' + \
        ''.join([t.result for t in threads])
    errors = '\n'.join(['\n'.join(t.errors)
                       for t in threads if t.errors]) + '\n'

    i = 0
    while os.path.exists(f'{FILENAME}-{i}.txt'):
        i += 1

    with open(f'{FILENAME}-{i}.txt', 'w', encoding='utf-8') as result_file:
        result_file.write(result)

    with open(f'{FILENAME}-FAILS-{i}.txt', 'w', encoding='utf-8') as fails_file:
        fails_file.write(errors)

    exec_time = time.time() - start_time
    time.sleep(1)

    print("Finished!")
    print("Total dates: ", len(dates))
    print("Success dates: ", len(dates) - errors.count('\n'))
    print("Success rates: ", result.count('\n') - 2)
    print("Failure dates: ", errors.count('\n'))
    print(f"Execution time: {exec_time//60} min {round(exec_time % 60, 2)} s")
